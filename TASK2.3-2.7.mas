////////////////////////////////////////////////////////////////////
// Template for assignment 2 - Strings - Tasks from 2.3 to 2.7
//
// Your assignment submission needs to be based on this template.
//
// Only submit a single copy of this file that combines your
// solutions for all the tasks.
//
// Carefully read the instructions.
//
// You need to complete the subroutine and add a string to test the
// subroutine.
//
// Make sure all code is your own, and don't share any code or code
// fragments with other students.
//
////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////
// Code for your main program to call the subroutine
////////////////////////////////////////////////////////////////////

ORG 100		/ Main program starts at address 100H

/ Test case for Task 2.3
/ ... add code to call the subroutines for the particular task
/JnS subPrintString


/ Test case for Task 2.4
/ ... add code to call the subroutines for the particular task
/JnS subInputString


/ Test case for Task 2.5
/ ... add code to call the subroutines for the particular task
/JnS subInputString
/JnS subPrintString

/Load Newline
/Output

/JnS subToLower
/JnS subPrintString


/ Test case for Task 2.6
/ ... add code to call the subroutines for the particular task
/JnS subInputString
/JnS subPrintString

/Load Newline
/Output

/JnS subToLower
/JnS subPrintString

/Load Newline
/Output

/JnS subROT13
/JnS subPrintString

/ Test case for Task 2.7
/ ... add code to call the subroutines for the particular task
/JnS subInputString
/JnS subPrintString

/Load Newline
/Output

/JnS subROT13+
/JnS subPrintString

/ Finish execution
Halt

/ Location of Input string to be printed
StringAddress,	HEX 0036	/ This is the start address of the string
							/ ID: 33918236

////////////////////////////////////////////////////////////////////
// Task 2.3 - Subroutine for printing strings
////////////////////////////////////////////////////////////////////
                          
PrintFrom,		ADR StringAddress	/ Label holds the start address of the string to be printed. 

subPrintString,	HEX 000	/ subroutine start

				LoadI PrintFrom 
				Store CurrentCharacterLocation / Storing the start adress of the current character location

				LoadI CurrentCharacterLocation
				Store CurrentCharactersRemaining / The first value indicates the length of the word.

 				Load CurrentCharacterLocation
				Add One
				Store CurrentCharacterLocation / The characters to be printed starts from CCL + 1

Loop,			Load CurrentCharactersRemaining
				Skipcond 400 / If there is no character, halt the subroutine.
            	Jump Execute
                Jump End
            
Execute,		LoadI CurrentCharacterLocation
				Output / Indirectly accessing the characters from CCL.
                
				Load CurrentCharactersRemaining
				Subt One
        		Store CurrentCharactersRemaining / Decrementing CCR by 1.
                
				Load CurrentCharacterLocation
				Add One
				Store CurrentCharacterLocation / Incrementing CCL by 1.
                
				Jump Loop
                
End, 			JumpI subPrintString / subroutine end


////////////////////////////////////////////////////////////////////
// Task 2.4 - subroutine for string input
////////////////////////////////////////////////////////////////////

InputTo,		ADR StringAddress / Label holds the start address to store the string input.

subInputString,		HEX 000	/ subroutine start
					LoadI InputTo
					Store CurrentCharacterLocation / Storing the starting address in CCL

					Load CurrentCharacterLocation
					Add One
					Store CurrentCharacterLocation / The characters will be inputed into CCL + 1 and onwards

					/ Main program
Iterate, 			Input
					Store Temp / Storing the character temporarily in a temp value.
					StoreI CurrentCharacterLocation / Storing to memory.

					Skipcond 400 / Checks if the input is an integer 0 or not. If Integer = 0, AC = 0 and will go through the Exit section.
        			Jump Process
        			Jump Exit
        
Process, 			Load CurrentCharacterLocation
					Add One
                	Store CurrentCharacterLocation / Incremening CCL by 1.
                
                	Load Size
                	Add One
                	Store Size / Incrementing Size by 1.
                
					Jump Iterate
                
Exit, 				LoadI InputTo
         			Store CurrentCharacterLocation / Changing CCL back to the first address of the string.
                            
                    Load Size
                    StoreI CurrentCharacterLocation / Storing the size of the string in the first address.
                            
                    JumpI subInputString


////////////////////////////////////////////////////////////////////
// Task 2.5 - subroutine to convert to lowercase
////////////////////////////////////////////////////////////////////

startingAdressString, ADR StringAddress / Label to hold the start adress of the string.

subToLower,		HEX 000	/ subroutine start
						 
                LoadI startingAdressString
				Store CurrentCharacterLocation / Storing the starting address in CCL
                         
                LoadI CurrentCharacterLocation
				Store CurrentCharactersRemaining / The first address will hold the number of characters of the string
						 
                Load CurrentCharacterLocation
				Add One
                Store CurrentCharacterLocation / Incrementing CCL by 1 to start printing the characters of the string
                         
Main,			Load CurrentCharactersRemaining
				Skipcond 800 / Finishes if CCR = 0.
                Jump Finish
				Jump CheckLow
                        
CheckLow,		LoadI CurrentCharacterLocation
				Subt Char-A 
				Skipcond 000 / We will not consider Unicode characters that are 'less' than 'A'.
                Jump CheckUp
				Jump Finish
                        
CheckUp,		LoadI CurrentCharacterLocation
				Subt Char-Z
				Skipcond 800 / We will not consider Unicode characters that are 'more' than 'Z'.
                Jump Convert
                Jump Finish

Convert, 		LoadI CurrentCharacterLocation
				Add Difference / Lower - Upper = HEX 020 ==> lower = Upper + HEX 020
                StoreI CurrentCharacterLocation
                        
                Load CurrentCharacterLocation
				Add One
                Store CurrentCharacterLocation / Incrementing CCL by 1.
						
                Load CurrentCharactersRemaining
				Subt One
                Store CurrentCharactersRemaining / Decrementing CCR by 1.

                Jump Main

Finish,			JumpI subToLower

						
////////////////////////////////////////////////////////////////////
// Task 2.6 - subroutine for ROT13
////////////////////////////////////////////////////////////////////

addressOfString, ADR StringAddress / Label to hold the start adress of the string.
subROT13,		HEX 000	/ subroutine start
				LoadI addressOfString 
				Store CurrentCharacterLocation / Storing the address of the string in CCL
				
                LoadI CurrentCharacterLocation
				Store CurrentCharactersRemaining / The first address holds the value of the length of the characters.

				Load CurrentCharacterLocation
				Add One
                Store CurrentCharacterLocation / Incrementing CCL by 1 to start manipulating the string.
				
Body,			Load CurrentCharactersRemaining
				Skipcond 800 / Exits the subroutine if there are 0 character remaining to modify.
                Jump Out
                Jump checkLow

checkLow,		LoadI CurrentCharacterLocation 
				Subt Char-a
                Skipcond 000 / This will filter out Unicode characters that are 'less' than 'a'
                Jump checkUp
                Jump Increment

checkUp,		LoadI CurrentCharacterLocation
				Subt Char-z
                Skipcond 800 / This will filter out Unicode characters that are 'more' than 'z'
                Jump Encode
                Jump Increment

Encode,			LoadI CurrentCharacterLocation
				Subt Char-n
				Store tempChar / Temporary variable to store intermediate calculations.
						
                Load tempChar
                Skipcond 000 / If a Unicode character is less than 'n', it will jump to ifLower or otherwise it will jump to ifHigher
                Jump ifHigher
				Jump ifLower
                        
ifLower, 		Add Char-n / Getting back the Unicode HEX value of the character
                Store tempChar
						
                Load tempChar
                Add encodeRotate / for characters 'a' to 'm', we need to shift them 13 units to the right.

				StoreI CurrentCharacterLocation / Stores the rotated character into the memory.
				Jump Increment

ifHigher,		Add Char-a / From 'n' to 'z', we have to give them values from 'a' to 'm'
				StoreI CurrentCharacterLocation
				Jump Increment
                     
Increment,		Load CurrentCharacterLocation
				Add One
                Store CurrentCharacterLocation / Incrementing CCL by 1.

				Load CurrentCharactersRemaining
				Subt One
                Store CurrentCharactersRemaining / Decrementing CCR by 1.
                        
                Jump Body
                        
Out,			JumpI subROT13

///////////////////////////////////////////////////////////////////////
// Task 2.7 - alternative subroutine for ROT13 with special characters
///////////////////////////////////////////////////////////////////////

startAdress, ADR StringAddress / Label to store the starting string address.
subROT13+,	HEX 000	/ subroutine start
/ ... add subroutine code to encode all ASCII characters in stored string.
						LoadI startAdress
                        Store CurrentCharacterLocation / Storing the string address.

						LoadI CurrentCharacterLocation
						Store CurrentCharactersRemaining / The first address contains the length of the string.

						Load CurrentCharacterLocation
						Add One
                        Store CurrentCharacterLocation / Incrementing CCL by 1 to start rotating the characters.

MainProg,			 	Load CurrentCharactersRemaining
						Skipcond 800 / Ends the program if there are 0 characters remaining.
                        Jump EndProg
                        Jump Filter1

/ Getting the range of Unicode letter characters from A to ...                            
Filter1,				LoadI CurrentCharacterLocation
						Subt Char-A
                        Skipcond 000 / Jumps to encoding non-letters if the character is 'less' than 'A', otherwise we need to filter out more.
                        Jump Filter2
                        Jump NotLetter

/ Getting the range of Unicode letter characters from A to z         
Filter2,			 	LoadI CurrentCharacterLocation
						Subt Char-z
                        Skipcond 800/ Jumps to encoding non-letters if the character is 'more' than 'z', otherwise we need to filter out more.
                        Jump Filter3
                        Jump NotLetter

/ Getting the range of Unicode letter characters from A to Z, ... to z
Filter3,			 	LoadI CurrentCharacterLocation
						Subt Char-Z
                        Skipcond 800 / Jumps to encoding uppercase if the character is 'less' than or 'equal' to 'Z', otherwise additional filtering is required.
                        Jump UpperCase
                        Jump Filter4

/ Getting the range of Unicode letter characters from a-z, ... to < a
Filter4,			   	LoadI CurrentCharacterLocation
					   	Subt Char-a
                       	Skipcond 000 / Jumps to encoding lowercase if the character is 'more' than or 'equal' to 'a'
                       	Jump LowerCase
                       	Jump NotLetter

UpperCase,				LoadI CurrentCharacterLocation
						Jump encodeUpper / Jump to UpperCase section

encodeUpper,			Subt Char-N
                        Store tempChar / Storing the character temporarily.
                          
                        Load tempChar
                    	Skipcond 000 / If character is less than 'N', it will jump to ifLowerforUpper, otherwise the latter.
                        Jump ifHigherforUpper
						Jump ifLowerforUpper


ifLowerforUpper,		Add Char-N / Getting back the character
                        Store tempChar
                              
                        Load tempChar
                        Add encodeRotate / Shifting 13 units to the right.

                        StoreI CurrentCharacterLocation
						Jump Step

ifHigherforUpper,		Add Char-A / Characters 'N' to 'Z' will now have 'A' to 'M'

                        StoreI CurrentCharacterLocation
						Jump Step

LowerCase,				LoadI CurrentCharacterLocation
						Jump encodeLower / Jumps to LowerCase section

encodeLower, 			Subt Char-n
                        Store tempChar / Storing the character temporarily.
                                  
                        Load tempChar
                        Skipcond 000 / If the character is less than 'n', it will jump to ifLowerforUpper, otherwise the latter.
                        Jump ifHigherforLower
						Jump ifLowerforLower

ifLowerforLower,		Add Char-n / Getting back the character
						Store tempChar
                                    
                        Load tempChar
						Add encodeRotate / Shifting 13 units to the right.

						StoreI CurrentCharacterLocation
						Jump Step

ifHigherforLower,       Load tempChar
						Add Char-a / Characters 'n' to 'z' will now have 'a' to 'm'

						StoreI CurrentCharacterLocation
                        Jump Step
									
                            
NotLetter,				LoadI CurrentCharacterLocation
				 		Add Offset / Shifting 2200H units to the right
				 		Store tempChar

                 		StoreI CurrentCharacterLocation

						Jump Step
					
Step,			 		Load CurrentCharacterLocation
				    	Add One
                    	Store CurrentCharacterLocation / Incrementing CCL by 1.

				    	Load CurrentCharactersRemaining
						Subt One
                    	Store CurrentCharactersRemaining / Decrementing CCR by 1.

                    	Jump MainProg

EndProg,				JumpI subROT13+


//////////////////////////////////////////////////////
/ Constants used throughout the program.
//////////////////////////////////////////////////////

// Character array that stores my name.
NAME,	HEX 0000 / number of characters is 10.

*REDACTED*
                          
        HEX 0000 / end of the name.

// Used for decrement/increment of CCL,CCR.
One, 	DEC 1

// Used for storing the HEX values of corresponding characters.
Char-A,		HEX 41
Char-Z,		HEX 5A
Char-a,		HEX 61
Char-z, 	HEX 7A
Char-n, 	HEX 6E
Char-N, HEX 4E

// The difference between lowercase and uppercase.
Difference, HEX 20

// Creates a newline between outputs.
Newline, 	HEX A

// Used for shifting characters to 13 units right.
encodeRotate,	HEX D

// Used for shifting non-letters to 4352 units right.
Offset, HEX 2200

///////////////////////////////////////////////////////
/ Variables used throughout the program.
///////////////////////////////////////////////////////

// CCR to store the number of characters remaining.
CurrentCharactersRemaining, 	HEX 00

// CCL to store the address of the current character going to be printed/manipulated.
CurrentCharacterLocation, 		HEX 00

// Temporarily storing the character before storing it indirectly to CCL.
Temp, 		HEX 0
tempChar,		HEX 0

// Stores the size of the string, and appends it to the first address of StringAddress.
Size, 		DEC 0